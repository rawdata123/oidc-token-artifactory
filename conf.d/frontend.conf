# This is the backend application we are protecting with OpenID Connect
upstream my_backend {
    zone my_backend 64k;
    #Update upstream endpoints
    server 10.1.1.4:8081;
}

# Custom log format to include the 'sub' claim in the REMOTE_USER field
log_format main_jwt '$remote_addr - $jwt_claim_sub [$time_local] "$request" $status '
                    '$body_bytes_sent "$http_referer" "$http_user_agent" "$http_x_forwarded_for"';



server {
    listen 8085;
    return 200 'd7d6dd9fXddfd';
}

# The frontend server - reverse proxy with OpenID Connect authentication
#
server {
    include conf.d/openid_connect.server_conf; # Authorization code flow and Relying Party processing
    error_log /var/log/nginx/error.log debug;  # Reduce severity level as required

    listen 8010; # Use SSL/TLS in production
    set $combined_args $http_remote_user:$http_x_forwarded_for:$http_user_agent;
    set $usertoken init; 
   
    location / {
        # This site is protected with OpenID Connect
        auth_jwt "" token=$session_jwt;
        error_page 401 = @do_oidc_flow;

        #auth_jwt_key_file $oidc_jwt_keyfile; # Enable when using filename
        auth_jwt_key_request /_jwks_uri; # Enable when using URL

        #After OIDC authentication, NGINX will initiate subrequest /auth to retrieve token.
        auth_request_set $dummyvar $usertoken; 
        auth_request /kvtest;

        # Successfully authenticated users are proxied to the backend,
        # with 'sub' claim passed in HTTP body
        #proxy_set_header username $jwt_claim_sub;
        proxy_method POST;
        proxy_set_body "username=$jwt_claim_sub";
        proxy_set_header Authorization 'Bearer $dummyvar';
        proxy_pass http://my_backend; # The backend site/app
        
        access_log /var/log/nginx/access.log main_jwt;
    }
}

# vim: syntax=nginx
